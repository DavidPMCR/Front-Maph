correr con permisos administrativos


npm install // para actualizar
npm run dev //backend correr come debug
cd tab //busca ruta

npm run web //front para ir a web
npm run android // ejecutar en el telefono concectado

si esta en ejecutando en android podes usar en terminal la "r" para reload


import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Alert,
} from 'react-native';
import axios from 'axios';

const ConsultationScreen = ({ route }) => {
  const { user } = route.params; // Usuario logueado
  const [formData, setFormData] = useState({
    id_consulta: '',
    id_cedula: '',
    id_empresa: user.id_empresa, // Declarado, pero no visible
    tipoconsulta: '',
    valoracion: '',
    presion_arterial: '',
    frecuencia_cardiaca: '',
    saturacion_oxigeno: '',
    glicemia: '',
    frecuencia_respiratoria: '',
    plan_tratamiento: '',
    fecha_consulta: '',
    monto_consulta: '',
  });

  const [isEditing, setIsEditing] = useState(false); // Controla si los campos son editables

  // Cargar datos desde la base de datos
  const fetchConsultationData = async () => {
    try {
      const response = await axios.get('http://localhost:3001/consultation');
      if (response.data.code === "200" && response.data.data.length > 0) {
        const consultation = response.data.data[0]; // Usamos la primera consulta para llenar los campos
        setFormData({
          ...formData,
          id_consulta: consultation.id_consulta.toString(),
          id_cedula: consultation.id_cedula,
          tipoconsulta: consultation.tipoconsulta,
          valoracion: consultation.valoracion,
          presion_arterial: consultation.presion_arterial,
          frecuencia_cardiaca: consultation.frecuencia_cardiaca,
          saturacion_oxigeno: consultation.saturacion_oxigeno,
          glicemia: consultation.glicemia,
          frecuencia_respiratoria: consultation.frecuencia_respiratoria,
          plan_tratamiento: consultation.plan_tratamiento,
          fecha_consulta: consultation.fecha_consulta.split('T')[0], // Solo la fecha
          monto_consulta: consultation.monto_consulta,
        });
      } else {
        Alert.alert('Aviso', 'No se encontraron consultas registradas.');
      }
    } catch (error) {
      console.error('Error al cargar los datos:', error.message);
      Alert.alert('Error', 'No se pudo cargar la consulta.');
    }
  };

  // Guardar consulta actualizada
  const handleSaveConsultation = async () => {
    try {
      if (!formData.id_cedula || !formData.tipoconsulta || !formData.valoracion || !formData.plan_tratamiento || !formData.fecha_consulta || !formData.monto_consulta) {
        Alert.alert('Error', 'Por favor complete todos los campos obligatorios.');
        return;
      }

      const response = await axios.put(`http://localhost:3001/consultation/${formData.id_consulta}`, formData);

      if (response.status === 200 || response.status === 201) {
        Alert.alert('Éxito', 'Consulta actualizada exitosamente.');
        setIsEditing(false); // Deshabilitar edición
      }
    } catch (error) {
      console.error('Error al guardar la consulta:', error.message);
      Alert.alert('Error', 'No se pudo guardar la consulta.');
    }
  };

  // Finalizar consulta
  const handleFinalizeConsultation = () => {
    setFormData({
      id_consulta: '',
      id_cedula: '',
      id_empresa: user.id_empresa,
      tipoconsulta: '',
      valoracion: '',
      presion_arterial: '',
      frecuencia_cardiaca: '',
      saturacion_oxigeno: '',
      glicemia: '',
      frecuencia_respiratoria: '',
      plan_tratamiento: '',
      fecha_consulta: '',
      monto_consulta: '',
    });
    setIsEditing(false);
    Alert.alert('Consulta Finalizada', 'Los datos han sido limpiados.');
  };

  // Manejar cambios en los campos
  const handleChange = (field, value) => {
    setFormData({
      ...formData,
      [field]: value,
    });
  };

  // Cargar los datos al montar el componente
  useEffect(() => {
    fetchConsultationData();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Consulta Médica</Text>

      <ScrollView>
        <TextInput
          style={[styles.input, isEditing ? styles.editable : styles.readOnly]}
          value={formData.id_cedula}
          editable={isEditing}
          onChangeText={(value) => handleChange('id_cedula', value)}
          placeholder="Cédula*"
        />

        <TextInput
          style={[styles.input, isEditing ? styles.editable : styles.readOnly]}
          value={formData.tipoconsulta}
          editable={isEditing}
          onChangeText={(value) => handleChange('tipoconsulta', value)}
          placeholder="Tipo Consulta*"
        />

        <TextInput
          style={[styles.input, isEditing ? styles.editable : styles.readOnly]}
          value={formData.valoracion}
          editable={isEditing}
          onChangeText={(value) => handleChange('valoracion', value)}
          placeholder="Valoración*"
        />

        <TextInput
          style={[styles.input, isEditing ? styles.editable : styles.readOnly]}
          value={formData.presion_arterial}
          editable={isEditing}
          onChangeText={(value) => handleChange('presion_arterial', value)}
          placeholder="Presión Arterial (Opcional)"
        />

        <TextInput
          style={[styles.input, isEditing ? styles.editable : styles.readOnly]}
          value={formData.frecuencia_cardiaca}
          editable={isEditing}
          onChangeText={(value) => handleChange('frecuencia_cardiaca', value)}
          placeholder="Frecuencia Cardíaca (Opcional)"
        />

        <TextInput
          style={[styles.input, isEditing ? styles.editable : styles.readOnly]}
          value={formData.saturacion_oxigeno}
          editable={isEditing}
          onChangeText={(value) => handleChange('saturacion_oxigeno', value)}
          placeholder="Saturación de Oxígeno (Opcional)"
        />

        <TextInput
          style={[styles.input, isEditing ? styles.editable : styles.readOnly]}
          value={formData.glicemia}
          editable={isEditing}
          onChangeText={(value) => handleChange('glicemia', value)}
          placeholder="Glicemia (Opcional)"
        />

        <TextInput
          style={[styles.input, isEditing ? styles.editable : styles.readOnly]}
          value={formData.frecuencia_respiratoria}
          editable={isEditing}
          onChangeText={(value) => handleChange('frecuencia_respiratoria', value)}
          placeholder="Frecuencia Respiratoria (Opcional)"
        />

        <TextInput
          style={[styles.input, isEditing ? styles.editable : styles.readOnly]}
          value={formData.plan_tratamiento}
          editable={isEditing}
          onChangeText={(value) => handleChange('plan_tratamiento', value)}
          placeholder="Plan de Tratamiento*"
        />

        <TextInput
          style={[styles.input, isEditing ? styles.editable : styles.readOnly]}
          value={formData.fecha_consulta}
          editable={isEditing}
          onChangeText={(value) => handleChange('fecha_consulta', value)}
          placeholder="Fecha de Consulta*"
        />

        <TextInput
          style={[styles.input, isEditing ? styles.editable : styles.readOnly]}
          value={formData.monto_consulta}
          editable={isEditing}
          onChangeText={(value) => handleChange('monto_consulta', value)}
          placeholder="Monto Consulta*"
          keyboardType="numeric"
        />
      </ScrollView>

      {/* Botones */}
      <View style={styles.buttonContainer}>
        <TouchableOpacity
          style={styles.editButton}
          onPress={() => setIsEditing(true)}
        >
          <Text style={styles.buttonText}>Editar Consulta</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.saveButton}
          onPress={handleSaveConsultation}
        >
          <Text style={styles.buttonText}>Guardar Cambios</Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={styles.finalizeButton}
          onPress={handleFinalizeConsultation}
        >
          <Text style={styles.buttonText}>Finalizar Consulta</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#f8f9fa',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  input: {
    height: 50,
    borderColor: '#ccc',
    borderWidth: 1,
    borderRadius: 8,
    marginBottom: 10,
    paddingHorizontal: 10,
  },
  readOnly: {
    backgroundColor: '#e9ecef',
  },
  editable: {
    backgroundColor: '#fff',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 20,
  },
  editButton: {
    backgroundColor: '#007bff',
    padding: 15,
    borderRadius: 8,
    flex: 1,
    marginRight: 5,
  },
  saveButton: {
    backgroundColor: '#28a745',
    padding: 15,
    borderRadius: 8,
    flex: 1,
    marginHorizontal: 5,
  },
  finalizeButton: {
    backgroundColor: '#dc3545',
    padding: 15,
    borderRadius: 8,
    flex: 1,
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
    textAlign: 'center',
  },
});

export default ConsultationScreen;
